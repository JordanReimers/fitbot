{"ts":1359008416238,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"# encoding: utf-8\r\n\r\nEncoding.default_external = \"UTF-8\"\r\nEncoding.default_internal = \"UTF-8\"\r\n\r\nclass Weather\r\n    include Cinch::Plugin\r\n\r\n\t# Check the DB for stored locations\r\n\r\n\tdef get_location(m, param) \r\n\t\tif param == '' || param.nil?\r\n\t\t\tlocation = LocationDB.first(:nick => m.user.nick.downcase)\r\n\t\t\tif location.nil?\r\n\t\t\t\tm.reply \"location not provided nor on file.\"\r\n\t\t\t\treturn nil\r\n\t\t\telse\r\n\t\t\t\treturn location.location\r\n\t\t\tend\r\n\t\telse\r\n\t\t\treturn param.strip\r\n\t\tend\r\n\tend \r\n\r\n\r\n\tmatch /w(?:e(?:ather)?)?(?: (.+))?$/iu, method: :weather\r\n\tdef weather(m, loc = nil)\r\n\t\treturn unless ignore_nick(m.user.nick).nil?\r\n\r\n\t\tlocation = get_location(m, loc)\r\n\t\treturn if location.nil?\r\n\r\n\t\tbegin\r\n        \r\n            wunderground = Wunderground.new($WUNDERGROUNDAPI)\r\n        \r\n            argument = URI.escape(location)\r\n            \r\n            conditions = wunderground.conditions_for argument\r\n            \r\n            city        = conditions[\"current_observation\"][\"display_location\"][\"full\"]\r\n            condition   = conditions[\"current_observation\"][\"weather\"]\r\n            tempc       = conditions[\"current_observation\"][\"temp_c\"]\r\n            tempf       = conditions[\"current_observation\"][\"temp_f\"]\r\n            humidity    = conditions[\"current_observation\"][\"relative_humidity\"]\r\n            wind_mph    = conditions[\"current_observation\"][\"wind_mph\"]\r\n            wind_kph    = conditions[\"current_observation\"][\"wind_kph\"]\r\n            wind_dir    = conditions[\"current_observation\"][\"wind_dir\"]\r\n            \r\n            temp        = \"#{tempc}C (#{tempf}F)\"\r\n            wind        = \"From #{wind_dir} at #{wind_kph} KPH (#{wind_mph} MPH)\"\r\n        \r\n#\t\t\turl = Nokogiri::XML(open(\"http://www.google.com/ig/api?weather=#{argument}\").read)\r\n#\t\t\turl.encoding = 'utf-8'\r\n\r\n#\t\t\tcity        = url.xpath(\"//forecast_information/city/@data\")\r\n#\t\t\tcondition   = url.xpath(\"//current_conditions/condition/@data\")\r\n#\t\t\ttempc       = url.xpath(\"//current_conditions/temp_c/@data\")\r\n#\t\t\ttempf       = url.xpath(\"//current_conditions/temp_f/@data\")\r\n#\t\t\thumidity    = url.xpath(\"//current_conditions/humidity/@data\")\r\n#\t\t\twind        = url.xpath(\"//current_conditions/wind_condition/@data\")\r\n#\r\n#\t\t\tcity        = Iconv.conv(\"UTF-8\", 'ISO-8859-1', city.to_s)\r\n\r\n\t\t\treturn unless city.length > 1\r\n\r\n\t\t\ttext = \"#{city} \u00032|\u0003 #{condition} #{temp}. Humidity: #{humidity}. Wind: #{wind}\"\r\n\r\n\t\trescue \r\n\t\t\tm.reply \"Error getting weather for #{loc}\"\r\n\t\tend\r\n\t\tm.reply \"Weather \u00032|\u0003 #{text}\"\r\n\tend\r\n\r\n\tmatch /f(?:o(?:recast)?)?(?: (.+))?$/iu, method: :forecast\r\n\tdef forecast(m, loc = nil)\r\n\t\treturn unless ignore_nick(m.user.nick).nil?\r\n\r\n\t\tlocation = get_location(m, loc)\r\n\t\treturn if location.nil?\r\n\r\n\t\tbegin\r\n\t\t\targument = URI.escape(location)\r\n\t\t\turl = Nokogiri::XML(open(\"http://www.google.com/ig/api?weather=#{argument}\").read)\r\n\t\t\turl.encoding = 'utf-8'\r\n\r\n\t\t\tforecast  = url.xpath(\"//forecast_conditions\")\r\n\t\t\tcity      = url.xpath(\"//forecast_information/city/@data\")\r\n\t\t\tcity      = Iconv.conv(\"UTF-8\", 'ISO-8859-1', city.to_s)\r\n\t\t\ttext      = \"#{city} \u00032|\u0003 \"\r\n\r\n\t\t\treturn unless city.length > 1\r\n\r\n\t\t\tforecast.each do |cond|\r\n\t\t\t\tday         = cond.xpath(\"day_of_week/@data\")\r\n\t\t\t\tcondition   = cond.xpath(\"condition/@data\")\r\n\r\n\t\t\t\thigh        = cond.xpath(\"high/@data\")\r\n\t\t\t\tlow         = cond.xpath(\"low/@data\")\r\n\r\n\t\t\t\thighC       = ((\"#{high}\".to_i)-32.0)*(5.0/9.0)\r\n\t\t\t\tlowC        = ((\"#{low}\".to_i)-32.0)*(5.0/9.0)\r\n\r\n\t\t\t\ttext = text + \"\u0002#{day}\u0002: #{condition} #{highC.round}째C/#{lowC.round}째C (#{high}째F/#{low}째F) | \"\r\n\t\t\tend\r\n\t\t\ttext = text[0..text.length-4]\r\n\t\trescue \r\n\t\t\ttext = \"Error getting forecast for #{loc}\"\r\n\t\tend\r\n\t\tm.reply \"Forecast \u00032|\u0003 #{text}\"\r\n\tend\r\nend"]],"start1":0,"start2":0,"length1":0,"length2":3692}]],"length":3692}
