{"ts":1359128534186,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1359130268387,"patch":[[{"diffs":[[1,"# encoding: utf-8\r\n\r\nclass Timer\r\n    include Cinch::Plugin\r\n    \r\n    require 'actiontimer'\r\n    require 'chronic'\r\n    \r\n    @@timer = ActionTimer::Timer.new\r\n    \r\n    match /(?:remind|timer) (.+)\\s?\\|\\s?(.+)(?:\\s?-(r(?:e(?:peat)?)?))?/i\r\n    \r\n    def execute (m,time,message,repeat)\r\n        return unless ignore_nick(m.user.nick).nil?\r\n        return unless repeat.nil? || check_admin(m.user)\r\n    \tbegin\r\n        \r\n            realtime = Chronic.parse time\r\n            repeat.nil? ? repeat = false : repeat = true\r\n            \r\n            @@timer.add(:period => realtime, :once => repeat, :data => message){|x| m.reply \"#{x}\" }\r\n\r\n\t\t\tm.reply \"Remind \u00032|\u0003 Reminder set for #{realtime}: #{message}\"\r\n\t\trescue\r\n\t\t\tm.reply \"Remind \u00032|\u0003 Error\"\r\n\t\tend\r\n    end\r\nend"]],"start1":0,"start2":0,"length1":0,"length2":769}]],"length":769,"saved":false}
{"ts":1359130297037,"patch":[[{"diffs":[[0,"\r\nclass "],[-1,"Tim"],[1,"Remind"],[0,"er\r\n    "]],"start1":19,"start2":19,"length1":19,"length2":22},{"diffs":[[0,"eply \"Remind"],[1,"er"],[0," \u00032|\u0003 Remind"]],"start1":650,"start2":650,"length1":24,"length2":26},{"diffs":[[0," \"Remind"],[1,"er"],[0," \u00032|\u0003 Er"]],"start1":733,"start2":733,"length1":16,"length2":18}]],"length":776,"saved":false}
{"contributors":[],"silentsave":false,"ts":1359135944150,"patch":[[{"diffs":[[0,"re '"],[-1,"actiontim"],[1,"rufus/schedul"],[0,"er'\r"]],"start1":79,"start2":79,"length1":17,"length2":21},{"diffs":[[0,"r = "],[-1,"ActionTimer::Timer."],[1,"Rufus::Scheduler.start_"],[0,"new\r"]],"start1":140,"start2":140,"length1":27,"length2":31},{"diffs":[[0,"(.+)"],[-1,"(?:\\s?-(r(?:e(?:peat)?)?))?"],[0,"/i\r\n"]],"start1":218,"start2":218,"length1":35,"length2":8},{"diffs":[[0,"sage"],[-1,",repeat"],[0,")\r\n "]],"start1":259,"start2":259,"length1":15,"length2":8},{"diffs":[[0,"l?\r\n"],[-1,"        return unless repeat.nil? || check_admin(m.user)\r\n"],[0,"    "]],"start1":315,"start2":315,"length1":66,"length2":8},{"diffs":[[0,"    "],[-1,"repeat.nil? ? repeat = false : repeat = true\r\n            \r\n            @@timer.add(:period => realtime, :once => repeat, :data => message){|x| m.reply \"#{x}\" }"],[1,"\r\n            @@timer.at realtime do\r\n              m.reply message, true\r\n            end"],[0,"\r\n\r\n"]],"start1":392,"start2":392,"length1":168,"length2":98},{"diffs":[[0,"2|\u0003 "],[-1,"Reminder set for #{real"],[1,"Will be reminded #{"],[0,"time"]],"start1":512,"start2":512,"length1":31,"length2":27},{"diffs":[[0,"essage}\""],[1,", true"],[0,"\r\n\t\tresc"]],"start1":545,"start2":545,"length1":16,"length2":22},{"diffs":[[0,"\u0003 Error\""],[1,", true"],[0,"\r\n\t\tend\r"]],"start1":595,"start2":595,"length1":16,"length2":22},{"diffs":[[0,"   end\r\n"],[1,"    \r\n"],[0,"end"]],"start1":619,"start2":619,"length1":11,"length2":17}]],"length":636,"saved":false}
{"ts":1359136265921,"patch":[[{"diffs":[[0,"inded #{"],[1,"real"],[0,"time}: #"]],"start1":527,"start2":527,"length1":16,"length2":20}]],"length":640,"saved":false}
{"ts":1359137804063,"patch":[[{"diffs":[[0,"\r\n            \r\n"],[1,"            if realtime.nil?\r\n                m.reply \"Reminder \u00032|\u0003 Wrong time. Remember, NATURAL TIME (ex. 'in two minutes', '5 hours from now').\"\r\n                return\r\n            end\r\n            \r\n"],[0,"            @@ti"]],"start1":382,"start2":382,"length1":32,"length2":237}]],"length":845,"saved":false}
{"ts":1359137868019,"patch":[[{"diffs":[[0," now').\""],[1,", true"],[0,"\r\n      "]],"start1":538,"start2":538,"length1":16,"length2":22}]],"length":851,"saved":false}
{"ts":1359137927856,"patch":[[{"diffs":[[0,"rom now'"],[1,", 'next friday'"],[0,").\", tru"]],"start1":535,"start2":535,"length1":16,"length2":31}]],"length":866,"saved":false}
