{"ts":1358959626196,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1358959464465,"patch":[[{"diffs":[[1,"# encoding: utf-8\r\n\r\nclass Lastfm\r\n    include Cinch::Plugin\r\n\r\n\r\n\t# Check the DB for stored usernames\r\n\r\n\tdef get_lastfm(m, param) \r\n\t\tif param == '' || param.nil?\r\n\t\t\tusername = LastfmDB.first(:nick => m.user.nick.downcase)\r\n\t\t\tif username.nil?\r\n\t\t\t\tm.reply \"last.fm username not provided nor on file.\"\r\n\t\t\t\treturn nil\r\n\t\t\telse\r\n\t\t\t\treturn username.username\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tusername = LastfmDB.first(:nick => param.downcase)\r\n\t\t\tif username.nil?\r\n\t\t\t\treturn param.strip\r\n\t\t\telse\r\n\t\t\t\treturn username.username\r\n\t\t\tend\r\n\t\tend\r\n\tend \r\n\r\n\r\n\r\n\t# Last.fm user info\r\n\r\n\tmatch /lastfm(?: (.+))?/i, method: :user_info\r\n\r\n\tdef user_info(m, query = nil)\r\n\t\treturn unless ignore_nick(m.user.nick).nil?\r\n\r\n\t\tusername = get_lastfm(m, query)\r\n\t\treturn if username.nil?\r\n\r\n\t\tretrys = 2\r\n\r\n\t\tbegin\r\n\t\t\tresult = Nokogiri::XML(open(\"http://ws.audioscrobbler.com/2.0/?method=user.getinfo&user=#{username}&api_key=\"+$LASTFMAPI, :read_timeout=>3).read)\r\n\r\n\t\t\tuser          = result.xpath(\"//user/name\").text\r\n\t\t\trealname      = result.xpath(\"//user/realname\").text\r\n\t\t\tage           = result.xpath(\"//user/age\").text\r\n\t\t\tsex           = result.xpath(\"//user/gender\").text\r\n\t\t\tlocation      = result.xpath(\"//user/country\").text\r\n\t\t\tplaycount     = result.xpath(\"//user/playcount\").text\r\n\r\n\t\t\tplaycount = playcount.reverse.gsub(%r{([0-9]{3}(?=([0-9])))}, \"\\\\1,\").reverse\r\n\r\n\t\t\tage = \"–\" if age.length < 1\r\n\t\t\tsex = \"–\" if sex.length < 1\r\n\t\t\tlocation = \"–\" if location.length < 1\r\n\r\n\t\t\trealname = \"\u0002\"+realname+\"\u0002 \" if realname.length > 1\r\n\r\n\t\t\treply = \"#{realname}#{user} (#{age}/#{sex}/#{location}) \u00034|\u0003 #{playcount} Scrobbles \u00034|\u0003 Top Artists: \"\r\n\r\n\t\t\tresult = Nokogiri::XML(open(\"http://ws.audioscrobbler.com/2.0/?method=user.gettopartists&user=#{username}&period=overall&limit=5&api_key=\"+$LASTFMAPI, :read_timeout=>3).read)\r\n\r\n\t\t\ttop_artists = result.xpath(\"//topartists/artist\")[0..4]\r\n\r\n\t\t\ttop_artists.each do |artist|\r\n\t\t\t\tname = artist.xpath(\"name\").text\r\n\t\t\t\tcount = artist.xpath(\"playcount\").text\r\n\t\t\t\treply = reply + \"#{name} (#{count}), \"\r\n\t\t\tend\r\n\t\t\treply = reply[0..reply.length-3]\r\n\t\trescue Timeout::Error\r\n\t\t\tif retrys > 0\r\n\t\t\t\tretrys = retrys - 1\r\n\t\t\t\tretry\r\n\t\t\telse\r\n\t\t\t\treply = \"Timeout error\"\r\n\t\t\tend\r\n\t\trescue\r\n\t\t\treply = \"The user '#{username}' doesn't have a Last.fm account\"\r\n\t\tend\r\n\t\tm.reply \"Last.fm \u00034|\u0003 #{reply}\"\r\n\tend\r\n\r\n\r\n\r\n\t# Last.fm 7 day charts\r\n\r\n\tmatch /charts(?: (.+))?/i, method: :charts\r\n\r\n\tdef charts(m, query = nil)\r\n\t\treturn unless ignore_nick(m.user.nick).nil?\r\n\r\n\t\tusername = get_lastfm(m, query)\r\n\t\treturn if username.nil?\r\n\r\n\t\tretrys = 2\r\n\r\n\t\tbegin\r\n\t\t\tresult = Nokogiri::XML(open(\"http://ws.audioscrobbler.com/2.0/?method=user.gettopartists&user=#{username}&period=7day&limit=5&api_key=\"+$LASTFMAPI, :read_timeout=>3).read)\r\n\t\t\ttop_artists = result.xpath(\"//topartists/artist\")[0..4]\r\n\t\t\treply = \"Top 5 Weekly artists for #{username} \u00034|\u0003 \"\r\n\t\t\ttop_artists.each do |artist|\r\n\t\t\t\tname = artist.xpath(\"name\").text\r\n\t\t\t\tcount = artist.xpath(\"playcount\").text\r\n\t\t\t\treply = reply + \"#{name} (#{count}), \"\r\n\t\t\tend\r\n\t\t\treply = reply[0..reply.length-3]\r\n\t\trescue Timeout::Error\r\n\t\t\tif retrys > 0\r\n\t\t\t\tretrys = retrys - 1\r\n\t\t\t\tretry\r\n\t\t\telse\r\n\t\t\t\treply = \"Timeout error\"\r\n\t\t\tend\r\n\t\trescue\r\n\t\t\treply = \"The user '#{username}' doesn't have a Last.fm account\"\r\n\t\tend\r\n\t\tm.reply \"Last.fm \u00034|\u0003 #{reply}\"\r\n\tend\r\n\r\n\r\n\r\n\t# Compare two users\r\n\r\n\tmatch /compare (\\S+)$/i, method: :compare\r\n\tmatch /compare (\\S+) (\\S+)/i, method: :compare\r\n\r\n\tdef compare(m, one, two = nil)\r\n\t\treturn unless ignore_nick(m.user.nick).nil?\r\n\r\n\t\tuserone = get_lastfm(m, one)\r\n\t\treturn if userone.nil?\r\n\r\n\t\tusertwo = get_lastfm(m, two)\r\n\t\treturn if usertwo.nil?\r\n\r\n\t\tretrys = 2\r\n\r\n\t\tbegin\r\n\t\t\tresult = Nokogiri::XML(open(\"http://ws.audioscrobbler.com/2.0/?method=tasteometer.compare&type1=user&type2=user&value1=#{userone}&value2=#{usertwo}&api_key=\"+$LASTFMAPI, :read_timeout=>3).read)\r\n\t\t\tscore = result.xpath(\"//score\").text\r\n\r\n\t\t\tcommon = result.xpath(\"//artists/artist\")[0..4]\r\n\t\t\tcommonlist = \"\"\r\n\t\t\tcommon.each do |getcommon|\r\n\t\t\t\tartist = getcommon.xpath(\"name\").text\r\n\t\t\t\tcommonlist = commonlist + \"#{artist}, \"\r\n\t\t\tend\r\n\t\t\tcommonlist = commonlist[0..commonlist.length-3]\r\n\t\t\tcommonlist = \"Common artists include: #{commonlist}\" if commonlist != \"\"\r\n\r\n\t\t\tscore = score[2..4]\r\n\t\t\tscr = \"#{score.to_i/10}.#{score.to_i % 10}\"\r\n\r\n\t\t\treply = \"#{userone} vs #{usertwo} \u0002#{scr}%\u0002 \u00034|\u0003 #{commonlist}\"\r\n\t\trescue Timeout::Error\r\n\t\t\tif retrys > 0\r\n\t\t\t\tretrys = retrys - 1\r\n\t\t\t\tretry\r\n\t\t\telse\r\n\t\t\t\treply = \"Timeout error\"\r\n\t\t\tend\r\n\t\trescue\r\n\t\t\treply = \"Error\"\r\n\t\tend\r\n\t\tm.reply \"Last.fm \u00034|\u0003 #{reply}\"\r\n\tend\r\n\r\n\r\n\r\n\t# Last played/Currently playing Track\r\n\r\n\tmatch /np(?: (.+))?/i, method: :now_playing\r\n\r\n\tdef now_playing(m, query = nil)\r\n\t\treturn unless ignore_nick(m.user.nick).nil?\r\n\r\n\t\tusername = get_lastfm(m, query)\r\n\t\treturn if username.nil?\r\n\r\n\t\tretrys = 2\r\n\r\n\t\tbegin\r\n\t\t\tresult = Nokogiri::XML(open(\"http://ws.audioscrobbler.com/2.0/?method=user.getrecenttracks&user=#{username}&limit=1&api_key=\"+$LASTFMAPI, :read_timeout=>3).read)\r\n\r\n\t\t\tartist  = result.xpath(\"//recenttracks/track[1]/artist\").text\r\n\t\t\ttrack   = result.xpath(\"//recenttracks/track[1]/name\").text\r\n\t\t\tnow     = result.xpath(\"//recenttracks/track[1]/@nowplaying\").text\r\n\t\t\talbum   = result.xpath(\"//recenttracks/track[1]/album\").text\r\n\r\n\t\t\talbum   = \" from #{album}\" if album != \"\"\r\n\r\n\t\t\ttagurl = Nokogiri::XML(open(\"http://ws.audioscrobbler.com/2.0/?method=artist.gettoptags&artist=#{URI.escape(artist)}&api_key=\"+$LASTFMAPI, :read_timeout=>3).read)\r\n\t\t\ttags = tagurl.xpath(\"//toptags/tag\")[0..3]\r\n\t\t\ttaglist = \"\"\r\n\t\t\ttags.each do |gettags|\r\n\t\t\t\ttag = gettags.xpath(\"name\").text\r\n\t\t\t\ttaglist = taglist + \"#{tag}, \"\r\n\t\t\tend\r\n\t\t\ttaglist = taglist[0..taglist.length-3]\r\n\t\t\ttaglist = \"\u00034|\u0003 #{taglist}\" if taglist != \"\"\r\n\r\n\t\t\tif now == \"true\"\r\n\t\t\t\treply = \"#{username} is playing: \\\"#{track}\\\" by #{artist}#{album} #{taglist}\"\r\n\t\t\telse\r\n\t\t\t\treply = \"#{username} last played: \\\"#{track}\\\" by #{artist}#{album} #{taglist}\"\r\n\t\t\tend\r\n\t\trescue Timeout::Error\r\n\t\t\tif retrys > 0\r\n\t\t\t\tretrys = retrys - 1\r\n\t\t\t\tretry\r\n\t\t\telse\r\n\t\t\t\treply = \"Timeout error\"\r\n\t\t\tend\r\n\t\trescue\r\n\t\t\treply = \"Error\"\r\n\t\tend\r\n\t\tm.reply \"Last.fm \u00034|\u0003 #{reply}\"\r\n\tend\r\n\r\n\r\n\r\n\t# Artist Info\r\n\r\n\tmatch /artist (.+)/i, method: :artist_info\r\n\r\n\tdef artist_info(m, query)\r\n\t\treturn unless ignore_nick(m.user.nick).nil?\r\n\r\n\t\tbegin\r\n\t\t\tartistinfo = Nokogiri::XML(open(\"http://ws.audioscrobbler.com/2.0/?method=artist.getinfo&artist=#{URI.escape(query)}&api_key=\"+$LASTFMAPI))\r\n\t\t\ttoptracks  = Nokogiri::XML(open(\"http://ws.audioscrobbler.com/2.0/?method=artist.gettoptracks&artist=#{URI.escape(query)}&limit=3&autocorrect=1&api_key=\"+$LASTFMAPI))    \r\n\r\n\t\t\tartist     = artistinfo.xpath(\"//lfm/artist/name\").text\r\n\t\t\tplays      = artistinfo.xpath(\"//lfm/artist/stats/playcount\").text\r\n\t\t\tlisteners  = artistinfo.xpath(\"//lfm/artist/stats/listeners\").text\r\n\t\t\turl        = artistinfo.xpath(\"//lfm/artist/url\").text\r\n\r\n\t\t\ttags = artistinfo.xpath(\"//tags/tag\")[0..2]\r\n\t\t\ttaglist = \"\"\r\n\t\t\ttags.each do |gettags|\r\n\t\t\t\ttag = gettags.xpath(\"name\").text\r\n\t\t\t\ttaglist = taglist + \"#{tag}, \"\r\n\t\t\tend\r\n\t\t\ttaglist = taglist[0..taglist.length-3]\r\n\t\t\ttaglist = \"\u00034|\u0003 \u0002Tags\u0002: #{taglist}. \" if taglist != \"\"\r\n\r\n\t\t\ttracks = toptracks.xpath(\"//toptracks/track\")\r\n\t\t\ttracklist = \"\"\r\n\t\t\ttracks.each do |gettracks|\r\n\t\t\t\ttrack = gettracks.xpath(\"name\").text\r\n\t\t\t\ttracklist = tracklist + \"#{track}, \"\r\n\t\t\tend\r\n\t\t\ttracklist = tracklist[0..tracklist.length-3]\r\n\t\t\ttracklist = \"\u0002Tracks\u0002: #{tracklist}. \" if tracklist != \"\"\r\n\r\n\t\t\tplays     = plays.reverse.gsub(%r{([0-9]{3}(?=([0-9])))}, \"\\\\1,\").reverse\r\n\t\t\tlisteners = listeners.reverse.gsub(%r{([0-9]{3}(?=([0-9])))}, \"\\\\1,\").reverse\r\n\r\n\t\t\treply = \"\u0002%s\u0002 \u00034|\u0003 %s plays, %s listeners \u00034|\u0003 %s%s\u00034|\u0003 %s\" % [artist, plays, listeners, tracklist, taglist, url]\r\n\t\trescue\r\n\t\t\treply = \"Error\"\r\n\t\tend\r\n\t\tm.reply \"Last.fm \u00034|\u0003 #{reply}\"\r\n\tend\r\n\r\nend"]],"start1":0,"start2":0,"length1":0,"length2":7877}]],"length":7877,"saved":false}
{"contributors":[],"silentsave":false,"ts":1373305943195,"patch":[[{"diffs":[[0,"name = \""],[-1,"\u0002"],[0,"\"+realna"]],"start1":1472,"start2":1472,"length1":17,"length2":16},{"diffs":[[0,"alname+\""],[-1,"\u0002"],[0," \" if re"]],"start1":1484,"start2":1484,"length1":17,"length2":16},{"diffs":[[0,"ation}) "],[-1,"\u00034|\u0003"],[1,"|"],[0," #{playc"]],"start1":1572,"start2":1572,"length1":20,"length2":17},{"diffs":[[0,"robbles "],[-1,"\u00034|\u0003"],[1,"|"],[0," Top Art"]],"start1":1597,"start2":1597,"length1":20,"length2":17},{"diffs":[[0,".reply \"Last.fm "],[-1,"\u00034|\u0003"],[1,"|"],[0," #{reply}\"\r\n\tend"]],"start1":2285,"start2":2285,"length1":36,"length2":33},{"diffs":[[0,"ername} "],[-1,"\u00034|\u0003"],[1,"|"],[0," \"\r\n\t\t\tt"]],"start1":2844,"start2":2844,"length1":20,"length2":17},{"diffs":[[0,".reply \"Last.fm "],[-1,"\u00034|\u0003"],[1,"|"],[0," #{reply}\"\r\n\tend"]],"start1":3274,"start2":3274,"length1":36,"length2":33},{"diffs":[[0,"wo} "],[-1,"\u0002"],[0,"#{scr}%"],[-1,"\u0002 \u00034|\u0003"],[1," |"],[0," #{c"]],"start1":4339,"start2":4339,"length1":22,"length2":17},{"diffs":[[0,".reply \"Last.fm "],[-1,"\u00034|\u0003"],[1,"|"],[0," #{reply}\"\r\n\tend"]],"start1":4534,"start2":4534,"length1":36,"length2":33},{"diffs":[[0,"list = \""],[-1,"\u00034|\u0003"],[1,"|"],[0," #{tagli"]],"start1":5710,"start2":5710,"length1":20,"length2":17},{"diffs":[[0,".reply \"Last.fm "],[-1,"\u00034|\u0003"],[1,"|"],[0," #{reply}\"\r\n\tend"]],"start1":6124,"start2":6124,"length1":36,"length2":33},{"diffs":[[0," = \""],[-1,"\u00034|\u0003 \u0002"],[1,"| "],[0,"Tags"],[-1,"\u0002"],[0,": #{"]],"start1":7127,"start2":7127,"length1":19,"length2":14},{"diffs":[[0," = \""],[-1,"\u0002"],[0,"Tracks"],[-1,"\u0002"],[0,": #{"]],"start1":7426,"start2":7426,"length1":16,"length2":14},{"diffs":[[0," = \""],[-1,"\u0002"],[0,"%s"],[-1,"\u0002 \u00034|\u0003"],[1," |"],[0," %s "]],"start1":7646,"start2":7646,"length1":17,"length2":12},{"diffs":[[0,"ers "],[-1,"\u00034|\u0003"],[1,"|"],[0," %s%s"],[-1,"\u00034|\u0003"],[1,"|"],[0," %s\""]],"start1":7674,"start2":7674,"length1":21,"length2":15},{"diffs":[[0,".fm "],[-1,"\u00034|\u0003"],[1,"|"],[0," #{r"]],"start1":7797,"start2":7797,"length1":12,"length2":9}]],"length":7825,"saved":false}
